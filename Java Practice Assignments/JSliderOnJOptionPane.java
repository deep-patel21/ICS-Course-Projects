// Language Level Converter line number map: dj*->java. Entries: 52
//     1->9         2->10        3->11        4->12        5->13        6->14        7->15        8->16   
//     9->17       10->18       11->19       12->20       13->21       14->22       15->23       16->24   
//    17->25       18->26       19->27       20->28       21->29       22->30       23->31       24->32   
//    25->33       26->34       27->35       28->36       29->37       30->38       31->39       32->40   
//    33->41       34->42       35->43       36->44       37->45       38->46       39->47       40->48   
//    41->49       42->50       43->51       44->52       45->53       46->54       47->55       48->72   
//    49->73       50->74       51->75       52->76   
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class JSliderOnJOptionPane {
  public static void main(final String[] args) {
   
    
    final JFrame parent = new JFrame();
    final JOptionPane optionPane = new JOptionPane();
    final JSlider slider = getSlider(optionPane);
    
    
    optionPane.setMessage(new Object[] { "Select a value: ", slider });
    final JDialog dialog = optionPane.createDialog(parent, "Deep's |-------slider--|");
    dialog.setVisible(true);
    System.out.println("Input: " + optionPane.getInputValue());
  }

  public static JSlider getSlider(final JOptionPane optionPane) {
    final JSlider slider = new JSlider();
    slider.setMajorTickSpacing(10);
    slider.setPaintTicks(true);
    slider.setPaintLabels(true);
    final ChangeListener changeListener = new ChangeListener() {
      
      
      
      
      
      
      
      public void stateChanged(final ChangeEvent changeEvent) {
        final JSlider theSlider = (JSlider) changeEvent.getSource();
        
        
        
        
        
        if (!theSlider.getValueIsAdjusting()) {
          optionPane.setInputValue(new Integer(theSlider.getValue()));
        }
      }
    
                                      /** This method is automatically generated by the Language Level Converter. */
                                      public java.lang.String toString() {
                                        return getClass().getName() + "(" + 
                                            ")";
                                      }

                                      /** This method is automatically generated by the Language Level Converter. */
                                      public boolean equals(java.lang.Object o) {
                                        return (this == o);
                                      }

                                      /** This method is automatically generated by the Language Level Converter. */
                                      public int hashCode() {
                                        return getClass().hashCode();
                                      }
                                    };
    slider.addChangeListener(changeListener);
    return slider;
  }


  /** This method is automatically generated by the Language Level Converter. */
  public JSliderOnJOptionPane() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      JSliderOnJOptionPane cast = ((JSliderOnJOptionPane) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}
